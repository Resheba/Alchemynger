[tool.poetry]
name = "Alchemynger"
version = "0.2.0"
authors = [
  "Resheba <c90de11@gmail.com>",
]
description = "Simple SQLAlchemy connector manager."
keywords = ["SQLAlchemy", "SQL", "Database"]
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
]
packages = [{include = "alchemynger"}]

[project.urls]
Source = "https://github.com/Resheba/Alchemynger"

[tool.poetry.dependencies]
python = ">=3.9"
sqlalchemy = "^2.0.36"

[tool.poetry.group.dev.dependencies]
typing-extensions = "^4.12.2"
pytest = "^8.2.2"
ruff = "^0.5.0"
mypy = "^1.10.1"
pytest-asyncio = "^0.24.0"
aiosqlite = "^0.20.0"

[tool.mypy]
python_version = "3.11"
strict = true
files = "alchemynger,tests"
ignore_missing_imports = true
disallow_subclassing_any = false

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [ "ALL" ]
ignore = [
    "I001",     # import block is un-sorted or un-formatted
    "B019",     # cache
    "D100",     # pydocstyle: undocumented-public-module
    "D101",     # pydocstyle: undocumented-public-class
    "D102",     # pydocstyle: undocumented-public-method
    "D103",     # pydocstyle: undocumented-public-function
    "D104",     # pydocstyle: undocumented-public-package
    "D105",     # pydocstyle: undocumented-magic-method
    "D106",     # pydocstyle: undocumented-public-nested-class
    "D107",     # pydocstyle: undocumented-public-init
    "D203",     # pydocstyle: one-blank-line-before-class
    "D200",     # pydocstyle
    "D400",     # pydocstyle
    "D212",     # pydocstyle
    "D415",     # pydocstyle
    "D401",     # pydocstyle
    "D213",     # pydocstyle: multi-line-summary-second-line
    "ANN002",	# flake8-annotations: missing-type-args
	"ANN003",	# flake8-annotations: missing-type-kwargs
    "ANN101",   # flake8-annotations: missing-type-self
    "ANN102",   # flake8-annotations: missing-type-cls
    "ASYNC1",   # flake8-trio
    "S603",		# flake8-bandit: subprocess-without-shell-equals-true
	"S607",		# flake8-bandit: start-process-with-partial-path
	"DJ",		# flake8-django
	"EM",		# flake8-errmsg
    "G004",     # flake8-logging-format: logging-f-string
    "TD002",    # flake8-todos: missing-todo-author
    "TD003",    # flake8-todos: missing-todo-link
    "FIX",      # flake8-fixme
    "ERA001",   # eradicate: commented-out-code
	"PD",		# pandas-vet
	"PLR0911",	# pylint: too-many-return-statements
	"PLR0913",	# pylint: too-many-arguments
	"TRY003",	# tryceratops: raise-vanilla-args
	"NPY",		# numpy
	"AIR",		# airflow
	"RUF001",	# ruff: ambiguous-unicode-character-string
	"RUF002",	# ruff: ambiguous-unicode-character-docstring
	"RUF003",	# ruff: ambiguous-unicode-character-comment
]

[tool.ruff.lint.per-file-ignores]
"**/tests/*" = [
    "S101",     # flake8-bandit: assert
    "SLF001",   # flake8-self: private-member-access
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
